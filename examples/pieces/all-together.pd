#N canvas 65 85 1301 687 10;
#X obj 759 96 context :X 17 :Y -1 :Z 14 :a ' # = | ' :d 2 :h 1 :i -3
-3 -2 0 -3 0 -4 0 -2 0 0 0 0 0 -2 -2 1 :j 3 4 0 :n ks :p -1 :R 63.36
:x 1 2 3 5 7 11 13 15 16 17 :ID 1;
#X obj 146 427 cyclone/tanh~;
#X obj 46 201 receive ks-;
#X obj 46 243 osc~;
#X obj 146 459 hip~ 100;
#X obj 120 769 dac~;
#X obj 229 496 compressor 0.329743 0.340298 0 10 447.959 0.265306 0.545423
100;
#X obj 186 244 f-env bass 100 26 5.24807 7 145 0 4 1 0 37;
#N canvas 699 264 450 398 bass 0;
#X obj 205 262 outlet~;
#X obj 206 49 f-env bass-pitch 43.6516 55 1.58489 4 6 75 362 1 1 0
;
#X obj 206 20 receive bass-;
#X obj 205 236 osc~;
#X text 49 300 I'm trying to think of a way in which two or more envelopes
can be grouped into one parameter. It would be really sweet if the
single message that Context is sending could alter both filters at
once.;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X restore 379 218 pd bass;
#X obj 174 99 context :H 57 :X 17 :Y 6 :Z 22 :a ' d (~ * 100) | ' :c
1 :d 2 :i 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 :n ' bass ' :x 2 3 4 6
7 9 11 12 14 15 16 17 :ID 3 6 obj -35 -93 list split 1 11 obj -1 -65
ols \$1 inlet outlet-x outlet-y mouse settings cutsom 9 obj 361 -103
presets \$1 :x :y :d :m 112 obj 0 27 content :H 6 :x2 0.002 :y1 0.000933333
:y2 0.0019 0 0 0 0 0.482761 0.551727 0.620693 0.689659 0.689659 0.689659
0.620693 0.620693 0.620693 0.58621 0.551727 0.551727 0.482761 0.46552
0.448278 0.431037 0.413795 0.275864 0.275864 0.206898 0.137932 0.137932
0.0689659 0 -0.0689659 -0.103449 -0.137932 -0.172415 -0.206898 -0.275864
-0.275864 -0.34483 -0.34483 -0.413795 -0.413795 -0.413795 -0.413795
-0.413795 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761
-0.482761 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761
-0.482761 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761 -0.482761
-0.413795 -0.413795 -0.413795 -0.275864 -0.241381 -0.206898 -0.137932
-0.103449 -0.0689659 0 0.0689659 0.0689659 0.206898 0.206898 0.275864
0.34483 0.34483 0.413795 0.413795 0.413795 0.459773 0.50575 0.551727
0.620693 0.689659 0.689659 0.689659 0.758625 0.827591 0.862074 0.896557
0.896557 0.896557 0.896557 0.896557 0.862074 0.827591 0 4 obj 0 -20
mover 5 connect 0 0 1 0 5 connect 0 1 2 1 5 connect 0 2 2 2 5 connect
0 3 2 3 5 connect 0 4 2 4 5 connect 1 1 2 0;
#X obj 262 431 *~ 0.1;
#X msg 29 181 0;
#X obj 504 254 f-env snare 100 82 6.60693 8 131 0 1.91 1 0 47;
#X obj 503 90 context :X 17 :Z 23 :a ' r (¬ - 1 *20) | ' :c 3 :d 2
:j 4 0 0 :n snare :p -1 :P -1 :x 1 2 4 5 7 9 13 14 16 :y 1 :ID 2;
#X obj 503 155 context :X 17 :Z 23 :a ' r (¬ - 1 *20) | ' :c 3 :d
2 :j 2 0 0 :n snare :p -1 :P -1 :x 1 2 4 5 8 9 11 13 14 16 :y 1 :ID
4;
#X obj 398 35 bng 40 250 50 0 empty empty start 45 7 0 10 -258113 -1
-1;
#X msg 64 171 \; c-all stop;
#N canvas 65 85 450 300 flange 0;
#X obj 143 14 inlet~;
#X obj 279 264 outlet~;
#X floatatom 188 100 5 0 0 0 - - -, f 5;
#X obj 279 153 * 0.01;
#X obj 279 175 osc~;
#X obj 143 52 delwrite~ flange 20;
#X obj 279 241 vd~ flange 20;
#X obj 279 219 *~ 10;
#X obj 279 197 +~ 1;
#X obj 173 100 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 173 120 switch~;
#X connect 0 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 8 0;
#X connect 6 0 1 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 9 0 10 0;
#X coords 0 -1 1 1 120 15 1 100 100;
#X restore 799 360 pd flange;
#N canvas 65 85 450 300 snare 0;
#X obj 191 248 outlet~;
#X obj 226 126 noise~;
#X obj 218 210 bp~ 1200 3;
#X obj 229 188 bp~ 600 2;
#X obj 231 163 bp~ 12000 6;
#X connect 1 0 2 0;
#X connect 1 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X restore 696 231 pd snare;
#X text 40 447 protection -->;
#X text 132 14 <-- change the mode! Ie. write "lociran" instead of
"major";
#X obj 27 15 scaler major c 3;
#X obj 46 265 *~ 0.2;
#X text -88 247 bit of extra bass -->;
#X text 728 416 I built up this synth quite nicely. The basic unit
DSP is the same KS-synth that I sent you about a month ago \, but it's
now cloned 8 times to allow for polyphony. Then I put a second voice
in \, ie. a second [clone 8...] object. The second one can be tuned
at the bottom "detune" number (1.5 and 2 work best \, but you can give
it dissonance if you want).;
#X text 727 512 The second voice has the same parameters as the first
\, except that there is an offset--this is the number object at the
bottom of each slider. This is mesured in percentiles relative to the
absolute setting \, and will follow the slider as you move it \, allowing
you to control both voices at once.;
#X text 725 631 Note: I created a new parameter object \, [slide2]
\, to do this. This is the same as [slide] \, except that it as a second
outlet for the second parameter. Relative messages still work the same
as before.;
#X text 967 253 <--DECAY: The decay is actually the feedback amount.
It put the limit at 1.01 which allows it to cascade sometimes. This
sounds good to begin with \, but it gets dangerous. Can you think of
any way of limiting the feedack? I was thinking of reading the amplitude
with [env~] nd then dampening the feedback when it gets above a certain
limit. But I wanted to check with you to see if you had any other solutions.
;
#X text 727 584 You can get some pretty crazy sounds out of this! Make
sure that the decay is turned up higher for the second voice \, or
else you might not hear it.;
#X text 441 232 Still want to make this sound sharper -->;
#X obj 488 35 bng 40 250 50 0 empty empty stop 45 7 0 10 -258113 -1
-1;
#X obj 1026 22 context :X 11 :Z 20 :a ' m (?100) (¬ * 1000) | ' :d
10 :i 0 0 0 0 0 0 0 0 0 0 5 :n ks :x 1 4 5 7 11 :ID 5;
#N canvas 342 302 450 300 what's 0;
#X text 55 30 The Context message system doesn't initialize until the
first one is sent \, so they send frequency 0 to the ks-synth. This
is a bug that I will fix at some stage \, but for now I think it sounds
quite good!, f 67;
#X restore 734 707 pd what's that wierd crashing sound the first time
you press play?;
#X obj 46 223 route float;
#X obj 790 205 ks2 ks -96 100 -31 72 -38 68.21 21 65 24 2.0893 6 2.39883
-12 56 42 82 1.5;
#X msg 1042 -32 :a m (?100) (¬ * 1000);
#X msg 1785 168;
#X text 927 359 <-- doesn't sound that great \, but it's simple.;
#X text 1172 20 <-- This Context is being used to modulate the "amount"
parameter on ks. I updated the [slide] object so that if the receive
channel ("m" here) receives 2 digits x y \, it will slide to x in y
miliseconds. The Context message box is sending "m x y" to "ks-". x
is a random number (?100) and y (¬ * 1000) is the gap between this
toggle and the next \, multiplied by 1000 (=10 seconds / 10 x-axis
toggles). This means that whatever random number the ? variable picks
\, it will reach that point just as the next value is chosen. So you
can increase or decrease the chaos of the modulation just by adding
or removing toggles. This is working really well! With a bit more work
\, I'll be able to make this formula work across different time and
x-axis denominations.;
#X text 761 159 Negative toggle floats used here for the melody. x
with no float means zero.;
#X obj 838 -15 bng 40 250 50 0 empty empty start_modulation 45 7 0
10 -258113 -1 -1;
#X obj 22 460 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 32 494 stutter feedback 100 58 8.70964 1.65959;
#X connect 1 0 4 0;
#X connect 2 0 33 0;
#X connect 3 0 22 0;
#X connect 4 0 5 1;
#X connect 4 0 5 0;
#X connect 6 0 5 0;
#X connect 6 0 5 1;
#X connect 7 0 10 0;
#X connect 8 0 7 2;
#X connect 10 0 1 0;
#X connect 11 0 3 0;
#X connect 11 0 16 0;
#X connect 12 0 10 0;
#X connect 15 0 0 7;
#X connect 15 0 9 1;
#X connect 15 0 13 7;
#X connect 17 0 1 0;
#X connect 18 0 12 2;
#X connect 22 0 1 0;
#X connect 30 0 11 0;
#X connect 33 0 3 0;
#X connect 34 0 17 0;
#X connect 34 0 42 1;
#X connect 35 0 31 2;
#X connect 40 0 31 1;
#X connect 41 0 42 0;
#X connect 42 0 1 0;
